// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/budget_model.dart';
import 'models/category_model.dart';
import 'models/transaction_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 11143451727784363),
      name: 'Budget',
      lastPropertyId: const obx_int.IdUid(14, 3775064036549851376),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2414359229942652847),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8352858598109825961),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2256623323725384751),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 494499658325410024),
            name: 'recurrenceIndex',
            type: 5,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6334046687876583700),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6560110214767947578),
            name: 'spent',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6647933830684001303),
            name: 'startDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3775064036549851376),
            name: 'endDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1119077516576195096),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(6, 5715178040933009774),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4745628967234237674),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8146740009437224633),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4877561578870918268),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4093365357242571247),
            name: 'icon',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3339030376157748256),
            name: 'color',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5715178040933009774),
            name: 'budget',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1427906798787236526),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(5, 6333285339426909185),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5819455863045439247),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2798112594417341455),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 368719889151102935),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7880787321321525395),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6333285339426909185),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 1427906798787236526),
      lastIndexId: const obx_int.IdUid(1, 7815717120096920097),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [7815717120096920097],
      retiredPropertyUids: const [
        1496671323663501678,
        7681178503298756978,
        804205692189830356,
        3368927713319956791,
        4591701696135235233,
        7887518528616315358
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Budget: obx_int.EntityDefinition<Budget>(
        model: _entities[0],
        toOneRelations: (Budget object) => [],
        toManyRelations: (Budget object) => {},
        getId: (Budget object) => object.id,
        setId: (Budget object, int id) {
          object.id = id;
        },
        objectToFB: (Budget object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final categoryOffset = fbb.writeString(object.category);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(3, object.amount);
          fbb.addInt32(9, object.recurrenceIndex);
          fbb.addOffset(10, categoryOffset);
          fbb.addFloat64(11, object.spent);
          fbb.addInt64(12, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(13, object.endDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final spentParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final recurrenceIndexParam =
              const fb.Int32Reader().vTableGet(buffer, rootOffset, 22, 0);
          final startDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final endDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));
          final object = Budget(
              id: idParam,
              name: nameParam,
              amount: amountParam,
              category: categoryParam,
              spent: spentParam,
              recurrenceIndex: recurrenceIndexParam,
              startDate: startDateParam,
              endDate: endDateParam);

          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final iconOffset =
              object.icon == null ? null : fbb.writeString(object.icon!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, iconOffset);
          fbb.addInt64(4, object.color);
          fbb.addFloat64(5, object.budget);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final iconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final colorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final budgetParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Category(
              id: idParam,
              name: nameParam,
              type: typeParam,
              icon: iconParam,
              color: colorParam,
              budget: budgetParam);

          return object;
        }),
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[2],
        toOneRelations: (Transaction object) => [],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addOffset(4, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Transaction(
              id: idParam,
              category: categoryParam,
              amount: amountParam,
              date: dateParam,
              type: typeParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Budget] entity fields to define ObjectBox queries.
class Budget_ {
  /// See [Budget.id].
  static final id =
      obx.QueryIntegerProperty<Budget>(_entities[0].properties[0]);

  /// See [Budget.name].
  static final name =
      obx.QueryStringProperty<Budget>(_entities[0].properties[1]);

  /// See [Budget.amount].
  static final amount =
      obx.QueryDoubleProperty<Budget>(_entities[0].properties[2]);

  /// See [Budget.recurrenceIndex].
  static final recurrenceIndex =
      obx.QueryIntegerProperty<Budget>(_entities[0].properties[3]);

  /// See [Budget.category].
  static final category =
      obx.QueryStringProperty<Budget>(_entities[0].properties[4]);

  /// See [Budget.spent].
  static final spent =
      obx.QueryDoubleProperty<Budget>(_entities[0].properties[5]);

  /// See [Budget.startDate].
  static final startDate =
      obx.QueryDateProperty<Budget>(_entities[0].properties[6]);

  /// See [Budget.endDate].
  static final endDate =
      obx.QueryDateProperty<Budget>(_entities[0].properties[7]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[1].properties[1]);

  /// See [Category.type].
  static final type =
      obx.QueryStringProperty<Category>(_entities[1].properties[2]);

  /// See [Category.icon].
  static final icon =
      obx.QueryStringProperty<Category>(_entities[1].properties[3]);

  /// See [Category.color].
  static final color =
      obx.QueryIntegerProperty<Category>(_entities[1].properties[4]);

  /// See [Category.budget].
  static final budget =
      obx.QueryDoubleProperty<Category>(_entities[1].properties[5]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[2].properties[0]);

  /// See [Transaction.category].
  static final category =
      obx.QueryStringProperty<Transaction>(_entities[2].properties[1]);

  /// See [Transaction.amount].
  static final amount =
      obx.QueryDoubleProperty<Transaction>(_entities[2].properties[2]);

  /// See [Transaction.date].
  static final date =
      obx.QueryDateProperty<Transaction>(_entities[2].properties[3]);

  /// See [Transaction.type].
  static final type =
      obx.QueryStringProperty<Transaction>(_entities[2].properties[4]);
}
